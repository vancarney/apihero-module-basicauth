fs = require 'fs-extra'
path = require 'path'
{_} = require 'lodash'
class RouteItem
  constructor:(@route_item)->
  save:(callback)->
    throw 'callback required' unless callback? and typeof callback is 'function'
    fs.ensureDir path.dirname( p = @route_item.route_file ), (e)=>
      return callback.apply @, arguments if e?
      fs.writeFile "#{p}.js", @template(@route_item), {flag:'wx+'}, (e)=>
        callback.apply @, arguments if e?
        fs.writeFile "#{p}.json", JSON.stringify(@route_item, null, 2), {flag:'wx+'}, (e)=>
          callback.apply @, arguments

RouteItem::template = _.template """
/**
 * <%= name %>.js
 * Route Handler File
 * Generated by Jade-Router for ApiHero 
 */
var _ = require('lodash');
var _app_ref;
var config = require('./<%= name %>.json');
var render = function(res, model) {
  res.render( config.template_file, model, function(e,html) {
    if (e !== null) console.log(e);
    res.send(html);
  }); 
};

var <%= name %>Handler = function(req, res, next) {
  var funcName = config.queryMethod || 'find';
  var collectionName = ((name = config.collectionName) == "") ? null : name;
  var model = {meta:[], results:[]};
  
  if (collectionName == null && _app_ref.models.hasOwnProperty(collectionName) == false )
    return render(res, model);
  
    var execQuery = function(colName, funName, q, cB) {
      if (q.hasOwnProperty('arguments')) {
        var args = _.values(q.arguments);
        args.push(cB);
        return _app_ref.models[colName][funName].apply( this, args );
      }

      return _app_ref.models[colName][funName]( q, cB);
    };
    
  if (_.isArray(config.query)) {
    var done = _.after(config.query.length, function(e, resultset) {
      if (e != null) {
          console.log(e);
          return res.sendStatus(500);
        }
      render(res, JSON.parse(JSON.stringify(resultset)));
    });
    
    _.each(config.query, function(q) {
      var elName  = q.hasOwnProperty('name') ? q.name : 'results';
      var colName = q.hasOwnProperty('collectionName') ? q.collectionName : collectionName;
      var funName = q.hasOwnProperty('queryMethod') ? q.queryMethod : (funcName || 'find');
      
      if (q.query.hasOwnProperty('arguments')) {
         for (arg in q.query.arguments) {
          if ((param = q.query.arguments[arg].match(/^(\:|\?)+([a-zA-Z0-9\-_]{1,})+$/)) != null) {
            q.query.arguments[arg] = req[(param[1] === ':' ? 'params' : 'query')][''+param[2]];
          }
        }
      }
      
      execQuery(colName, funName, q.query, function(e, res) {
        o = {};
        o[elName] = res;
        done(e, _.extend(model, o));
      });
    });
  }
  
  else {
    var elName  = q.hasOwnProperty('name') ? q.name : 'results';
    var colName = q.hasOwnProperty('collectionName') ? q.collectionName : collectionName;
    var funName = q.hasOwnProperty('queryMethod') ? q.queryMethod : (funcName || 'find');
    
    if (q.query.hasOwnProperty('arguments')) {
       for (arg in q.query.arguments) {
        if ((param = q.query.arguments[arg].match(/^(\:|\?)+([a-zA-Z0-9\-_]{1,})+$/)) != null) {
          q.query.arguments[arg] = req[(param[1] === ':' ? 'params' : 'query')][''+param[2]];
        }
      }
    }
    
    execQuery(colName, funName, q.query, function(e, res) {
      o = {};
      o['elName'] = res;
      done(e, _.extend(model, o));
    });
  }

};

module.exports.init = function(app) {
  _app_ref = app;
  var route = (s = config.route.split('rx:')).length > 1 ? new RegExp(s.pop()) : config.route;
  app.get(route, <%= name %>Handler);
};
"""
module.exports = RouteItem