// Generated by CoffeeScript 1.9.3
var hasAccessToken, loopback, path;

path = require('path');

loopback = require("" + (path.join(process.cwd(), 'node_modules', 'loopback')));

hasAccessToken = function(req) {
  return req.hasOwnProperty('accessToken') && (req.accessToken != null);
};

module.exports.init = function(app, options, cB) {
  var authOptions, handleAuth;
  app.enableAuth();
  if (options && typeof options === 'function') {
    cB = arguments[1];
    options = {};
  }
  authOptions = (options != null ? options.hasOwnProperty('authOptions') : void 0) ? options.authOptions : {};
  app.models.User.restore = function(token, cB) {
    return app.models.AccessToken.findOne({
      where: {
        id: token
      }
    }, function(e, token) {
      return cB.apply(this, arguments);
    });
  };
  app.models.User.remoteMethod('restore', {
    accepts: [
      {
        arg: 'token',
        type: 'string',
        required: true
      }
    ],
    http: {
      path: '/login/restore/:token',
      verb: 'get'
    },
    returns: {
      type: 'Object',
      root: true
    }
  });
  app.models.User.logout = function(req, res, cB) {
    if (!hasAccessToken(req)) {
      return cB('accessToken not defined');
    }
    return app.models.AccessToken.destroyById(req.accessToken.id, function() {
      delete req.session.userId;
      delete req.signedCookies.authorization;
      return cB({
        status: 204
      });
    });
  };
  app.models.User.remoteMethod('logout', {
    accepts: [
      {
        arg: 'req',
        type: 'object',
        'http': {
          source: 'req'
        }
      }, {
        arg: 'res',
        type: 'object',
        'http': {
          source: 'res'
        }
      }
    ],
    http: {
      path: '/login',
      verb: 'delete',
      status: 204
    },
    returns: {
      type: 'null',
      root: true
    }
  });
  app.post('/reset-password', function(req, res, next) {
    if (!hasAccessToken(req)) {
      return res.sendStatus(401);
    }
    if (!(((req.body.password != null) && (req.body.confirmation != null)) && ((req.body.password.match(new RegExp("^" + req.body.confirmation + "+$"))) != null))) {
      return res.sendStatus(400, new Error('Passwords do not match'));
    }
    return app.models.User.findById(req.accessToken.userId, function(e, user) {
      if (e != null) {
        return res.sendStatus(404);
      }
      return user.updateAttribute('password', req.body.password, function(e, user) {
        if (e != null) {
          return res.sendStatus(404);
        }
        return res.json({
          title: 'Password reset success',
          content: 'Your password has been reset successfully',
          redirectTo: '/',
          redirectToLinkText: 'Log in'
        });
      });
    });
  });
  app.use(loopback.token({
    model: app.models.accessToken
  }));
  app.use(function(req, res, next) {
    if (!(hasAccessToken(req) && req.signedCookies)) {
      res.clearCookie('authorization');
      return next();
    } else {
      return app.models.User.findById(req.accessToken.userId, function(e, user) {
        if (e != null) {
          console.log(e);
        }
        req.session.userId = req.accessToken.userId;
        req.user = user;
        console.log("set user attrs upon request");
        console.log(user);
        return next();
      });
    }
  });
  handleAuth = function(context, result, next) {
    if ((result != null ? result.id : void 0) == null) {
      context.res.cookie('authorization', result.id, {
        httpOnly: true,
        signed: true
      });
      return app.models.User.findById(result.userId, authOptions, function(e, user) {
        return context.req.session.regenerate((function(_this) {
          return function(err) {
            context.req.session.userId = result.userId;
            context.req.user = user;
            return next();
          };
        })(this));
      });
    } else {
      return next();
    }
  };
  app.models.User.afterRemote('login', handleAuth);
  app.models.User.afterRemote('restore', handleAuth);
  app.models.User.afterRemote('logout', function(context, result, next) {
    if (context.req.hasOwnProperty('user')) {
      delete context.req.user;
    }
    return context.res.clearCookie('authorization');
  });
  return cB();
};
