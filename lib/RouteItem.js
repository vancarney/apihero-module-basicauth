// Generated by CoffeeScript 1.9.3
var RouteItem, _, fs, path;

fs = require('fs-extra');

path = require('path');

_ = require('lodash')._;

RouteItem = (function() {
  function RouteItem(route_item) {
    this.route_item = route_item;
  }

  RouteItem.prototype.save = function(callback) {
    var p;
    if (!((callback != null) && typeof callback === 'function')) {
      throw 'callback required';
    }
    return fs.ensureDir(path.dirname(p = this.route_item.route_file), (function(_this) {
      return function(e) {
        if (e != null) {
          return callback.apply(_this, arguments);
        }
        return fs.writeFile(p + ".js", _this.template(_this.route_item), {
          flag: 'wx+'
        }, function(e) {
          if (e != null) {
            callback.apply(_this, arguments);
          }
          return fs.writeFile(p + ".json", JSON.stringify(_this.route_item, null, 2), {
            flag: 'wx+'
          }, function(e) {
            return callback.apply(_this, arguments);
          });
        });
      };
    })(this));
  };

  return RouteItem;

})();

RouteItem.prototype.template = _.template("/**\n * <%= name %>.js\n * Route Handler File\n * Generated by Jade-Router for ApiHero \n */\nvar _ = require('lodash');\nvar _app_ref;\nvar config = require('./<%= name %>.json');\nvar render = function(res, model) {\n  res.render( config.template_file, model, function(e,html) {\n    if (e !== null) console.log(e);\n    res.send(html);\n  }); \n};\n\nvar <%= name %>Handler = function(req, res, next) {\n  var funcName = config.queryMethod || 'find';\n  var collectionName = ((name = config.collectionName) == \"\") ? null : name;\n  var model = {meta:[], results:[]};\n  \n  if (collectionName == null && _app_ref.models.hasOwnProperty(collectionName) == false )\n    return render(res, model);\n  \n    var execQuery = function(colName, funName, q, cB) {\n      if (q.hasOwnProperty('arguments')) {\n        var args = _.values(q.arguments);\n        args.push(cB);\n        return _app_ref.models[colName][funName].apply( this, args );\n      }\n\n      return _app_ref.models[colName][funName]( q, cB);\n    };\n    \n  if (_.isArray(config.query)) {\n    var done = _.after(config.query.length, function(e, resultset) {\n      if (e != null) {\n          console.log(e);\n          return res.sendStatus(500);\n        }\n      render(res, JSON.parse(JSON.stringify(resultset)));\n    });\n    \n    _.each(config.query, function(q) {\n      var elName  = q.hasOwnProperty('name') ? q.name : 'results';\n      var colName = q.hasOwnProperty('collectionName') ? q.collectionName : collectionName;\n      var funName = q.hasOwnProperty('queryMethod') ? q.queryMethod : (funcName || 'find');\n      execQuery(colName, funName, q.query, function(e, res) {\n        o = {};\n        o[elName] = res;\n        done(e, _.extend(model, o));\n      });\n    });\n  }\n  \n  else {\n    var elName  = q.hasOwnProperty('name') ? q.name : 'results';\n    var colName = q.hasOwnProperty('collectionName') ? q.collectionName : collectionName;\n    var funName = q.hasOwnProperty('queryMethod') ? q.queryMethod : (funcName || 'find');\n    execQuery(colName, funName, q.query, function(e, res) {\n      o = {};\n      o['elName'] = res;\n      done(e, _.extend(model, o));\n    });\n  }\n\n};\n\nmodule.exports.init = function(app) {\n  _app_ref = app;\n  app.get(config.route, <%= name %>Handler);\n};");

module.exports = RouteItem;
