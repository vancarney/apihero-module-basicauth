// Generated by CoffeeScript 1.9.0
var AbstractMonitor, RouteManager, RoutesMonitor, fs, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

fs = require('fs');

_ = require('lodash')._;

AbstractMonitor = require('api-hero').AbstractMonitor;

RoutesMonitor = (function(_super) {
  __extends(RoutesMonitor, _super);

  RoutesMonitor.prototype.__path = (app_root || '.') + "/views";

  function RoutesMonitor() {
    RoutesMonitor.__super__.constructor.call(this);
    this.refresh((function(_this) {
      return function(e, collection) {
        return RouteManager.getInstance().load(function(e, routes) {
          var arr;
          arr = collection.concat(_.filter(routes, function(route) {
            return _.pluck(collection, 'name').indexOf(route.route_file === -1);
          }));
          _this.__collection.__list = arr;
          return _this.startPolling();
        });
      };
    })(this));
  }

  RoutesMonitor.prototype.refresh = function(callback) {
    var ex;
    ex = [];
    return RouteManager.getInstance().load((function(_this) {
      return function(e, routes) {
        var del, list;
        list = _.compact(_.map(routes, function(v) {
          var stats, _path;
          _path = v.route_file + ".js";
          try {
            stats = fs.statSync(_path);
          } catch (_error) {
            e = _error;
            return {
              name: v.route_file
            };
          }
          return null;
        }));
        del = _.filter(_this.getCollection(), function(v) {
          return _.pluck(routes, 'route_file').indexOf(v.route_file) === -1;
        });
        _.each(del, function(to_remove) {
          return _this.__collection.removeItemAt(_this.getNames().indexOf(to_remove.name));
        });
        _this.__collection.addAll(list);
        return typeof callback === "function" ? callback(e, list) : void 0;
      };
    })(this));
  };

  RoutesMonitor.prototype.startPolling = function() {
    return this.__iVal != null ? this.__iVal : this.__iVal = fs.watch(this.__path, (function(_this) {
      return function(event, filename) {
        var e;
        try {
          return RouteManager.getInstance().load();
        } catch (_error) {
          e = _error;
          return console.log(e);
        } finally {
          _this.refresh();
        }
      };
    })(this));
  };

  return RoutesMonitor;

})(AbstractMonitor);

module.exports = RoutesMonitor;

RouteManager = require('./RouteManager');
